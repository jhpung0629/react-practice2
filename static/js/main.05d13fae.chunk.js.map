{"version":3,"sources":["components/Intro.js","components/LoginIntro.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","tick","position","state","text","length","showText","substr","setState","this","countdown","setInterval","id","className","src","width","height","lang","React","Component","LoginIntro","LoginForm","type","placeholder","App","is","handleButtonClick","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAGqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,KAAO,WACL,IAAIC,EAAW,EAAKC,MAAMD,SAC1B,GAAGA,GAAY,EAAKC,MAAMC,KAAKC,OAAQ,CACrCH,IACA,IAAII,EAAW,EAAKH,MAAMC,KAAKG,OAAO,EAAGL,GACzC,EAAKM,SAAS,CACZN,SAAUA,EACVI,SAAUA,SAELJ,EAAW,EAAKC,MAAMC,KAAKC,QAClC,EAAKG,SAAS,CACZN,cAtBJ,EAAKC,MAAQ,CACXC,KAAM,0FACNF,SAAU,EACVI,SAAU,IALK,E,iFAUjBG,KAAKC,UAAYC,YAAYF,KAAKR,KAAM,O,+BAoBxC,OACE,yBAAKW,GAAG,QAAQC,UAAU,SACxB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,YAAYC,IAAI,aAAaC,MAAM,QAAQC,OAAO,WAEnE,yBAAKC,KAAK,KAAKJ,UAAU,aACtBJ,KAAKN,MAAMG,e,GArCaY,IAAMC,YCEpBC,G,sLAGjB,OACE,yBAAKR,GAAG,cACN,kBAAC,EAAD,W,GALgCM,IAAMC,YCFzBE,E,iLAEjB,OACE,yBAAKT,GAAG,aAEN,0BAAMC,UAAU,cACd,yBAAKA,UAAU,oBACb,yBAAKC,IAAI,gBAGT,wBAAIG,KAAK,KAAKJ,UAAU,eAAxB,SAIF,yBAAKA,UAAU,oBACb,wBAAII,KAAK,KAAKJ,UAAU,eAAxB,uBAIF,yBAAKA,UAAU,cACb,2BAAOA,UAAU,cAAjB,MACA,2BAAOA,UAAU,aAAaS,KAAK,OAAOC,YAAY,QAExD,yBAAKV,UAAU,cACb,2BAAOA,UAAU,cAAjB,YACA,2BAAOA,UAAU,iBAAiBS,KAAK,WAAWC,YAAY,cAEhE,4BAAQN,KAAK,KAAKJ,UAAU,eAA5B,sBAGA,4BAAQI,KAAK,KAAKJ,UAAU,eAA5B,4BAGA,yBAAKI,KAAK,KAAKJ,UAAU,UAAzB,kEACe,gDAIjB,uBAAGA,UAAU,wBAAb,0D,GAtC+BK,IAAMC,WCExBK,G,kBACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDG,MAAQ,CACXsB,IAAI,GAEN,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBALR,E,iFASjBlB,KAAKD,SAAS,CAACiB,IAAKhB,KAAKN,MAAMsB,O,+BAIpBhB,KAAKN,MAAMsB,GAGtB,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GApByBK,IAAMC,YCOnBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05d13fae.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Intro.css'\r\nexport default class Intro extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: \"이 사이트는 React로 작성되었습니다!\",\r\n      position: 0,\r\n      showText: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.countdown = setInterval(this.tick, 200);\r\n  }\r\n\r\n  tick = () => {\r\n    let position = this.state.position;\r\n    if(position <= this.state.text.length) {\r\n      position++;\r\n      let showText = this.state.text.substr(0, position);\r\n      this.setState({\r\n        position: position,\r\n        showText: showText\r\n      });\r\n    }else if(position > this.state.text.length) {\r\n      this.setState({\r\n        position,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"intro\" className=\"intro\">\r\n        <div className=\"intro-img-wrap\">\r\n          <img className=\"intro-img\" src=\"/react.png\" width=\"200px\" height=\"200px\"></img>\r\n        </div>\r\n        <div lang=\"ko\" className=\"ment-wrap\">\r\n          {this.state.showText}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Intro from './Intro';\r\nimport './Login.css';\r\n\r\nexport default class LoginIntro extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"loginIntro\">\r\n        <Intro />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './Login.css'\r\n\r\nexport default class LoginForm extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"loginForm\">\r\n        \r\n        <form className=\"login-form\">\r\n          <div className=\"form-header-wrap\">\r\n            <img src=\"/coding.png\">\r\n\r\n            </img>\r\n            <h1 lang=\"ko\" className=\"form-header\">\r\n              Plog\r\n            </h1>\r\n          </div>\r\n          <div className=\"form-header-wrap\">\r\n            <h1 lang=\"ko\" className=\"form-header\">\r\n              로그인\r\n            </h1>\r\n          </div>\r\n          <div className=\"form-field\">\r\n            <label className=\"form-label\">ID</label>\r\n            <input className=\"input-text\" type=\"text\" placeholder=\"ID\"></input>\r\n          </div>\r\n          <div className=\"form-field\">\r\n            <label className=\"form-label\">PASSWORD</label>\r\n            <input className=\"input-password\" type=\"password\" placeholder=\"PASSWORD\"></input>\r\n          </div>\r\n          <button lang=\"ko\" className=\"btn-primary\">\r\n            로그인\r\n          </button>\r\n          <button lang=\"ko\" className=\"btn-primary\">\r\n            회원가입\r\n          </button>\r\n          <div lang=\"ko\" className=\"notice\">\r\n            아이디를 까먹으셨나요? <a>ID 찾기</a>\r\n          </div>\r\n\r\n        </form>\r\n        <p className=\"copyright-login-form\">\r\n          Copyright@2019 PungJungHyeon All rights reserved. \r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport LoginIntro from './components/LoginIntro';\nimport LoginForm from './components/LoginForm';\nimport './App.css'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      is: true\n    };\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleButtonClick() {\n    this.setState({is: !this.state.is});\n  }\n\n  render() {\n    const is = this.state.is;\n    let ment;\n\n    return (\n      <div className=\"App\">\n        <LoginIntro />\n        <LoginForm />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}